// Generated by CoffeeScript 1.7.1
(function() {
  var DiscussionFetcher, async, childProcess, _;

  childProcess = require("child_process");

  async = require("async");

  _ = require("underscore");

  DiscussionFetcher = (function() {
    function DiscussionFetcher(opts) {
      this.apiKey = opts.apiKey || process.env.TENDER_SITENAME || null;
      this.site = opts.site || process.env.TENDER_APIKEY || null;
      this.state = opts.state || "pending";
      this._perPage = 30;
      this._offset = 0;
      this.url = this._buildUrl();
      this.numPages = 0;
      this.err = null;
      this.discussions = [];
    }

    DiscussionFetcher.prototype._buildUrl = function() {
      var url;
      url = "http://api.tenderapp.com/" + this.site + "/discussions/" + this.state;
      return url;
    };

    DiscussionFetcher.prototype._validates = function() {
      if (!this.apiKey) {
        return new Error("You need to set an API key.");
      }
      if (!this.site) {
        return new Error("You need to set a Tender site name.");
      }
    };

    DiscussionFetcher.prototype.fetch = function(cb) {
      var err;
      err = this._validates();
      if (err) {
        return cb(err);
      }
      return this._fetchPage(1, (function(_this) {
        return function() {
          var num, q, _i, _ref, _results;
          if (_this.pageCount < 2) {
            return _this._end(cb);
          }
          q = async.queue(_this._fetchPage.bind(_this), 5);
          q.drain = function() {
            return _this._end(cb);
          };
          _results = [];
          for (num = _i = 2, _ref = _this.pageCount; 2 <= _ref ? _i <= _ref : _i >= _ref; num = 2 <= _ref ? ++_i : --_i) {
            _results.push(q.push(num));
          }
          return _results;
        };
      })(this));
    };

    DiscussionFetcher.prototype._end = function(cb) {
      this.discussions = _.unique(this.discussions);
      return cb(this.err, this.discussions);
    };

    DiscussionFetcher.prototype._fetchPage = function(page, cb) {
      var cmd;
      if (this.err) {
        return cb();
      }
      console.log("Handling page " + page);
      cmd = ["curl"];
      cmd.push("-H \"Accept: application/vnd.tender-v1+json\"");
      cmd.push("-H \"X-Tender-Auth: " + this.apiKey + "\"");
      cmd.push("-H \"Content-Type: application/json\"");
      cmd = cmd.join(" ");
      cmd += " " + this.url + "?page=" + page;
      return childProcess.exec(cmd, (function(_this) {
        return function(err, stdout, stderr) {
          var d, e, entry, parsed, _i, _len, _ref;
          _this._offset += _this._perPage;
          if (err) {
            _this.err = err;
            return cb(err);
          }
          parsed = null;
          try {
            parsed = JSON.parse(stdout);
          } catch (_error) {
            e = _error;
            _this.err = e;
            return cb();
          }
          _ref = parsed.discussions;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            d = _ref[_i];
            entry = {
              title: d.title,
              href: d.html_href,
              comments_href: d.comments_href,
              last_author_email: d.last_author_email,
              last_updated_at: d.last_updated_at
            };
            _this.discussions.push(entry);
          }
          if (page === 1) {
            _this.pageCount = Math.ceil(parsed.total / parsed.per_page);
          }
          return cb();
        };
      })(this));
    };

    return DiscussionFetcher;

  })();

  module.exports = DiscussionFetcher;

}).call(this);
