// Generated by CoffeeScript 1.7.1
(function() {
  var DiscussionFetcher, DiscussionResolver, config, request,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  request = require("request");

  config = require("./config");

  DiscussionFetcher = require("./discussion_fetcher");

  DiscussionResolver = (function() {
    function DiscussionResolver() {}

    DiscussionResolver.prototype.start = function(cb) {
      var fetcher, opts;
      if (!config.tender.siteName || !config.tender.apiKey) {
        throw new Error("You need to supply Tender credentials!");
      }
      opts = {
        site: config.tender.siteName,
        apiKey: config.tender.apiKey,
        state: config.state
      };
      fetcher = new DiscussionFetcher(opts);
      return fetcher.fetch((function(_this) {
        return function(err, discussions) {
          if (err) {
            throw err;
          }
          console.log(">> do filter");
          discussions = _this._filter(discussions);
          if (discussions.length > 0) {
            console.log(discussions);
            return _this._resolve(discussions, cb);
          }
        };
      })(this));
    };

    DiscussionResolver.prototype._filter = function(discussions) {
      var d, now, result, timeThen, _i, _len, _ref, _results;
      result = [];
      now = +(new Date) / 1000;
      _results = [];
      for (_i = 0, _len = discussions.length; _i < _len; _i++) {
        d = discussions[_i];
        if (_ref = d.last_author_email, __indexOf.call(config.staffEmails, _ref) < 0) {
          continue;
        }
        timeThen = +new Date(d.last_updated_at) / 1000;
        console.log(d.last_updated_at);
        if (now - timeThen < 86400 * config.numDays) {
          continue;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    DiscussionResolver.prototype._resolve = function(discussions, cb) {
      var msg;
      msg = "Found " + discussions.length + " discussions:\n";
      return cb(null);
    };

    return DiscussionResolver;

  })();

  module.exports = DiscussionResolver;

}).call(this);
