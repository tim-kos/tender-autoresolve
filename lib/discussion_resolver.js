// Generated by CoffeeScript 1.7.1
(function() {
  var DiscussionFetcher, DiscussionResolver, async, config, request,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  request = require("request");

  config = require("./config");

  async = require("async");

  DiscussionFetcher = require("./discussion_fetcher");

  DiscussionResolver = (function() {
    function DiscussionResolver() {}

    DiscussionResolver.prototype.start = function(cb) {
      var fetcher, opts;
      if (!config.tender.siteName || !config.tender.apiKey) {
        throw new Error("You need to supply Tender credentials!");
      }
      opts = {
        site: config.tender.siteName,
        apiKey: config.tender.apiKey,
        state: config.state
      };
      fetcher = new DiscussionFetcher(opts);
      return fetcher.fetch((function(_this) {
        return function(err, discussions) {
          if (err) {
            throw err;
          }
          discussions = _this._filter(discussions);
          return _this._resolveDiscussions(discussions, cb);
        };
      })(this));
    };

    DiscussionResolver.prototype._filter = function(discussions) {
      var d, now, result, timeThen, _i, _len, _ref;
      result = [];
      now = +(new Date) / 1000;
      for (_i = 0, _len = discussions.length; _i < _len; _i++) {
        d = discussions[_i];
        if (_ref = d.last_author_email, __indexOf.call(config.staffEmails, _ref) < 0) {
          continue;
        }
        timeThen = +new Date(d.last_updated_at) / 1000;
        if (now - timeThen < 86400 * config.numDays) {
          continue;
        }
        result.push(d);
      }
      return result;
    };

    DiscussionResolver.prototype._resolveDiscussions = function(discussions, cb) {
      var d, index, obj, q, _i, _len, _results;
      if (discussions.length === 0) {
        return cb();
      }
      q = async.queue(this._resolve.bind(this), 1);
      q.drain = cb;
      index = 1;
      _results = [];
      for (_i = 0, _len = discussions.length; _i < _len; _i++) {
        d = discussions[_i];
        obj = {
          index: index++,
          total: discussions.length,
          discussion: d
        };
        _results.push(q.push(obj));
      }
      return _results;
    };

    DiscussionResolver.prototype._resolve = function(obj, cb) {
      var discussion, index, opts, total, url;
      discussion = obj.discussion;
      index = obj.index;
      total = obj.total;
      url = discussion.comments_href.replace(/\{\?page\}/, "");
      opts = {
        url: url,
        form: config.formData,
        headers: {
          "X-Tender-Auth": config.tender.apiKey,
          "Accept": "application/vnd.tender-v1+json",
          "Content-Type": "application/json"
        }
      };
      return request.post(opts, function(err, resp, body) {
        if (err) {
          throw err;
        }
        console.log("" + index + " / " + total + ": Resolved " + discussion.href);
        return cb();
      });
    };

    return DiscussionResolver;

  })();

  module.exports = DiscussionResolver;

}).call(this);
